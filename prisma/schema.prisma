generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                    @id @default(autoincrement())
  email                   String                 @unique
  emailVerified           Boolean                @default(false)
  password                String
  fullname                String?
  tokenVersion            Int                    @default(0)
  roles                   UserRole[]
  refreshTokens           RefreshToken[]
  posts                   Post[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenId     String   @unique
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
}

model PasswordResetToken {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenId     String   @unique
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  users       UserRole[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model UserRole {
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([userId, roleId])
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model RolePermission {
  roleId       Int
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId Int
  permission   Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedAt   DateTime     @default(now())

  @@id([roleId, permissionId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  jti       String   @unique
  deviceId  String   @default(uuid())
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
