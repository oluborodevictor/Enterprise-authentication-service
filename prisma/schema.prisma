generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  emailVerified Boolean @default(false)
  password  String
  fullname String?
  tokenVersion Int @default(0)
  roles UserRole[]
  refreshTokens refreshToken[]
  posts Post[]
  emailverificationtokens EmailVerificationToken[]
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user user @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id Int @id @default(autoincrement())
  userId Int
  user user @relation(fields: [userId], references: [id])
  token String @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique
  users UserRole[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  userId Int
  user user @relation(fields: [userId], references: [id])
  roleId Int
  role Role @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now())

  @@id([userId, roleId])
}

model refreshToken {
id Int @id @default(autoincrement())
user user @relation(fields: [userId], references: [id], onDelete: Cascade)
userId Int
jti String @unique
deviceId String @default(uuid())
ipAddress String?
userAgent String?
expiresAt DateTime
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([userId])
}
